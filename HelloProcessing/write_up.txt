I want to have an input buffer to so that the client can issue multiple commands before/while the server processes them. I want the synchronized block to do as little as possible, ideally only changing one pointer.
I want the processing of the input buffer to lock each input pointer in the buffer on-by-one as it reads, while the writer will not lock the input pointer. This way the main game loop will never wait while processing an input. If the clientListener thread tries to replace a pointer in the buffer while that pointer is being read by the main game loop, the clientListener will have to wait and the new input being written will not be processed until the next iteration of the game loop. I believe this is an acceptable sacrifice.
I tried 

There is an input buffer that is a custom linked list of Input objects that point to the next Input object, with the ClientHandler having a pointer to the beginning and end of the list. This implementation is light on memory and speed and lets the two threads accessing the Objects minimal time for collision: The main game loop only needs to access the beginning of the list and replace it with null. The thread writing new input to the buffer needs to store the new input at the beginning of the list if the list is null, or at the end of the list if the beginning is not null. These two pointers require attention to simultaneous access from different threads. The writer will only write to the beginning if it is null. The reader does not write to the beginning and does nothing if it finds it to be null. It is not a problem then if the writer finds the beginning to be null and writes to it while simultaneously the reader finds the beginning to be null and does nothing with it. It will simply read the new input on the next loop instead. The writer on the other hand will not read what it is not supposed to, because it is the only thread that writes to the beginning.

The nice thing is if the main game loop is in the middle of processing input, there is no problem with the client thread adding more input to the end of the processed linked list.